% \iffalse meta-comment
%
% Copyright (C) 2019 by Tobias Plüss <tpluess@ieee.org>
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either
% version 1.3 of this license or (at your option) any later
% version.  The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of
% LaTeX version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[2011/06/27]
%<package>\ProvidesPackage{tikz-imagelabels}
%<package>  [2019/01/04 v0.1 image labels using TikZ]
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\RecordChanges

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{hyperref}
\usepackage{url}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{tikz-imagelabels}
\usepackage{float}

% default position for floats: H
\makeatletter
\renewcommand{\fps@figure}{H}
\renewcommand{\fps@table}{H}
\makeatother

\def\pkg{\texttt{tikz-imagelabels}}

\begin{document}
  \DocInput{tikz-imagelabels.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \changes{v0.1}{2019/01/04}{Submission to CTAN}
%
% \GetFileInfo{tikz-imagelabels.sty}
%
% \title{The \texttt{tikz-imagelabels} package\thanks{This document corresponds to \texttt{tikz-imagelabels}~\fileversion, dated~\filedate.}}
% \author{Tobias Plüss}
% \date{\filedate}
% \thispagestyle{empty}
% \maketitle
%
% \begin{abstract}
%   This package allows to put annotations (arrows, labels) on top of
%   images using Ti\emph{k}Z.
% \end{abstract}
%
% \tableofcontents
%
% \PrintChanges
%
% \StopEventually{}
%
% \section{What is it good for?}
%
% The package \pkg{} serves two purposes:
% \begin{itemize}
% \item put annotation labels on images, as shown for example in \autoref{fig:pleiades}. This figure shows the pleiades and has a label for each star. Also, on the bottom right, there is a small label for the whole image.\footnote{Image taken from \url{http://hubblesite.org/image/1562/news_release/2004-20}}
% \item put little arrows on a image to highlight certain details, like in \autoref{fig:jupiter}. This figure shows the great red spot in jupiter, with some additional small spots. The spots are highlighted with the aid of the arrows.\footnote{Image taken from \url{http://hubblesite.org/image/2354/news_release/2008-23}}
% \end{itemize}
%
% \begin{figure}
% \centering
% \begin{annotationimage}{width=6cm}{img/pleiades.jpg}
%   \draw[annotation left = {Atlas at 0.3}] to (0.11,0.4);
%   \draw[annotation left = {Pleione at 0.55}] to (0.11,0.49);
%   \draw[annotation left = {Alcyone at 0.8}] to (0.39,0.45);
%   \draw[annotation below = {Merope at 0.5}] to (0.58,0.28);
%   \draw[annotation right = {Electra at 0.3}] to (0.84,0.45);
%   \draw[annotation right = {Caleano at 0.75}] to (0.85,0.64);
%   \draw[annotation above = {Maia at 0.4}] to (0.67,0.72);
%   \draw[annotation above = {Taygeta at 0.9}] to (0.78,0.82);
%   \imagelabel{M45}
% \end{annotationimage}
% \caption{The Pleiades, also known as M45}
% \label{fig:pleiades}
% \end{figure}
%
% \begin{figure}
% \centering
% \begin{annotationimage}{width=6cm}{img/jupiter.jpg}
%    \marking{0.14}{0.38}{150}
%    \marking{0.27}{0.24}{-120}
%    \marking{0.65}{0.4}{-30}
%    \marking{0.39}{0.11}{40}
%    \marking{0.74}{0.12}{160}
% \end{annotationimage}
% \caption{Detail around the great red spot on jupiter}
% \label{fig:jupiter}
% \end{figure}
%
% But why does this task deserve its own \LaTeX package? there are several reasons:
% \begin{itemize}
%   \item one does not need to edit the photographs in an external graphics
%   program. They can be input directly into your \LaTeX{} document.
%   \item since the labels and annotations are processed by \LaTeX{}, all the font
%   settings and the like remain consistent through the whole the document, including
%   the labels for images.
%   \item since the arrows are processed by Ti\emph{k}Z, they are vector graphics.
%   If one would draw the annotations inside the pixel image, issues with scaling
%   may occur -- i.e. if on scales up the pixel image, the annotations would be
%   scaled as well, which often produces a blurry result. On the other hand,
%   using \pkg{}, the image can be scaled later by any desired amount, while the
%   annotations stay in place and font sizes and the like are not affected.
% \end{itemize}
%
% \section{How it works}
%
% The placement of labels or arrows is done as follows:
% \begin{enumerate}
%   \item The user includes the desired image by using the \verb|annotationimage| environment.
%   \item After that, a help grid can be displayed, as shown in \autoref{fig:pleiades_grid}, by using the \verb|\helpgrid| command. The help grid is scaled such that its bottom left corner always has coordinate $(0,0)$ and the top right corner has always coordinate $(1,1)$. The coordinate axes are labeled accordingly.
% \begin{figure}
% \centering
% \helpgrid
% \begin{annotationimage}{width=6cm}{img/pleiades.jpg}
% \end{annotationimage}
% \caption{Activated help grid}
% \label{fig:pleiades_grid}
% \end{figure}
%   \item The user picks the coordinates for the points to be labeled and inserts the label texts into the \LaTeX{} file.
%   \item After the labels have been placed as desired, the help grid and the coordinates can be hidden by removing the \verb|\helpgrid| command.
% \end{enumerate}
% Note that the labels will remain fixed, even if the image is scaled later, so it will not be necessary to adjust the coordinates
% later when scaling the image.
%

% \section{Usage}

% \subsection{Embedding the image}

% \DescribeEnv{annotationimage}
% This is the environment used to embed the image into the document. It has the
% following syntax:
%
% |annotationimage| \marg{options}\marg{file name}
%
% Here, \meta{options} can be any set of options the |\includegraphics| command
% understands, e.g. |width=5cm| or |height=4cm| or |scale=0.2|. The \meta{options}
% are indeed processed by |\includegraphics|.
%
% The \meta{file name} is the file name of the image file to be used. The same formats as for |\includegraphics| can be used.
%
% \emph{Example:} the code
% \begin{verbatim}
% \begin{annotationimage}{width=3cm}{example-image}
% \end{annotationimage}
% \end{verbatim}
% embeds the image, just as \verb|\includegraphics| would do, and sets the width of the image to 3.5\,cm. The result is shown below.
%
% \vspace{1cm}
% \begin{annotationimage}{width=5cm}{example-image}
% \end{annotationimage}
% \vspace{1cm}
%
% \DescribeMacro{\helpgrid}
% The |\helpgrid| macro may be used to enable the help grid.
% \emph{Example:} The code
% \begin{verbatim}
% \helpgrid
% \begin{annotationimage}{width=3cm}{example-image}
% \end{annotationimage}
% \end{verbatim}
% embeds the image and overlays it with the help grid. Note that |\helpgrid| should only be used within
% an environment; if it is used globally, all subsequent |annotationimage| environments will have the
% grid enabled, too. In this case, |\helpgridoff| may be used.
%
% \vspace{1cm}
% \helpgrid
% \begin{annotationimage}{width=5cm}{example-image}
% \end{annotationimage}
% \vspace{1cm}
% \helpgridoff
%
% \subsection{Adding a label to the image}
%
% \DescribeMacro{\imagelabel}
% This may be used to put a label to the image. The position can be configured
% globally.
%
% \emph{Example:} The code
% \begin{verbatim}
% \begin{annotationimage}{width=5cm}{example-image}
% \imagelabel{sample}
% \end{annotationimage}
% \end{verbatim}
% produces the image shown below.
%
% \vspace{1cm}
% \begin{annotationimage}{width=5cm}{example-image}
% \imagelabel{sample}
% \end{annotationimage}
% \vspace{1cm}
%
% \subsection{Adding labeled arrows to the image}
%
% There are four different macros to insert labels.
% \DescribeMacro{\labelleft}
% \DescribeMacro{\labelabove}
% \DescribeMacro{\labelright}
% \DescribeMacro{\labelbelow}
% The general symtax is as follows: |\label|\meta{position}\marg{coordinates}\marg{text}\marg{align}
%
% \meta{position} is any of: |left|, |above|, |right|, |bottom|.
%
% The \meta{coordinates} are the coordinates of the point to be labeled. They can be determined with the aid of the |\helpgrid|.
%
% The \meta{text} is the actual label text.
%
% \meta{align} is the alignment of the text, as follows: one coordinate of the text can be calculated according to the \meta{position}.
% For instance, if one wants to set a label |above| the image, the $y$ coordinate of the text will be $1.1$, which sets the text outside above
% the image. In this case, the \meta{align} allows to position the text along the $x$ axis. The example code clarifies the usage of \meta{align}.
%
% \emph{Example:} The code
% \begin{verbatim}
% \begin{annotationimage}{width=5cm}{example-image}
% \labelleft{0.5,0.5}{align = 0.1}{0.1}
% \labelleft{0.5,0.5}{align = 0.5}{0.5}
% \labelleft{0.5,0.5}{align = 0.9}{0.9}
% \labelabove{0.5,0.5}{align = 0.1}{0.1}
% \labelabove{0.5,0.5}{align = 0.5}{0.5}
% \labelabove{0.5,0.5}{align = 0.9}{0.9}
% \end{annotationimage}
% \end{verbatim}
% produces the image shown below.

% \vspace{1cm}
% \helpgrid
% \begin{annotationimage}{width=5cm}{example-image}
% \labelleft{0.5,0.5}{align = 0.1}{0.1}
% \labelleft{0.5,0.5}{align = 0.5}{0.5}
% \labelleft{0.5,0.5}{align = 0.9}{0.9}
% \labelabove{0.5,0.5}{align = 0.1}{0.1}
% \labelabove{0.5,0.5}{align = 0.5}{0.5}
% \labelabove{0.5,0.5}{align = 0.9}{0.9}
% \end{annotationimage}
% \helpgridoff
% \vspace{1cm}



%
% \section{Implementation}
% The only dependency of \pkg{} is Ti\emph{k}Z.
%    \begin{macrocode}
\RequirePackage{tikz}
%    \end{macrocode}
% Some Ti\emph{k}Z libraries are loaded automatically, since they are required
% to draw the arrows and calculate some positions.
%    \begin{macrocode}
\usetikzlibrary{
  arrows.meta,
  calc,
  positioning,
  decorations,
  decorations.markings,
  math,
}
%    \end{macrocode}
% Next, the setup of some Ti\emph{k}Z styles follows.
%    \begin{macrocode}
\tikzset{
%    \end{macrocode}
% Define the color of the coarse grid. Default is red.
%    \begin{macrocode}
  main grid color/.store in = \maingridcolor,
  main grid color = red,
%    \end{macrocode}
% Define the color of the fine grid. Default is gray.
%    \begin{macrocode}
  fine grid color/.store in = \finegridcolor,
  fine grid color = gray,
%    \end{macrocode}
% Define the text format of the image labels. The default is: sans serif font, small.
%    \begin{macrocode}
  image label format/.store in = \imagelabelfont,
  image label format = \sffamily\small,
%    \end{macrocode}
% Define the text format of the annotation labels. The default is: normal font, small.
%    \begin{macrocode}
  annotation format/.store in = \annotationfont,
  annotation format = \normalfont\small,
%    \end{macrocode}
% Define the length of the annotation arrows. The default is 8\,mm.
%    \begin{macrocode}
  arrow length/.store in = \markingarrowlength,
  arrow length = 8mm,
%    \end{macrocode}
% Define the distance between the arrow tip and the actual coordinate the arrow points to. The default is 1.5\,mm.
%    \begin{macrocode}
  arrow distance/.store in = \arrowdistance,
  arrow distance = 1.5mm,
%    \end{macrocode}
% The color of the borders around the arrows to ensure they are visible on (almost) any background.
%    \begin{macrocode}
  border color/.store in = \bordercolor,
  border color = white,
%    \end{macrocode}
% The color of the arrows themselves.
%    \begin{macrocode}
  arrow color/.store in = \arrowcolor,
  arrow color = black,
%    \end{macrocode}
% Define the line width of the arrows. This is actually the total line width, i.e. including the white borders. The default is 0.6\,mm.
%    \begin{macrocode}
  arrow thickness/.store in = \arrowthickness,
  arrow thickness = 0.5mm,
%    \end{macrocode}
% The size of the tips of the round arrows can be specified in terms of the linewidth. By default, the tips are 2.7 times as large as the line width.
%    \begin{macrocode}
  tip size/.store in = \tipsize,
  tip size = 1.5mm,
  annotation below/.style args = {#1 at #2}{
    annotation arrow,
    insert path = {
      (#2,-0.1) node[anchor = north] {\annotationfont #1 \strut{}}
    }
  },
  annotation above/.style args = {#1 at #2}{
    annotation arrow,
    insert path = {
      (#2,1.1) node[anchor = south] {\annotationfont #1 \strut{}}
    }
  },
  annotation left/.style args = {#1 at #2}{
    annotation arrow,
    insert path = {
      (-0.1,#2) node[anchor = east] {\annotationfont #1}
    }
  },
  annotation right/.style args = {#1 at #2}{
    annotation arrow,
    insert path = {
      (1.1,#2) node[anchor = west] {\annotationfont #1}
    }
  },
}
%    \end{macrocode}


%    \begin{macrocode}
% if this command is present, the help grid will be shown
\newcommand{\helpgrid}{\def\helpgridon{}}
\newcommand{\helpgridoff}{\let\helpgridon\undefined}
%    \end{macrocode}


% Then, the |annotationimage| environment is defined. The environment takes
% 2 mandatory parameters, both of which are described below.
%    \begin{macrocode}
\newenvironment{annotationimage}[2]{
%    \end{macrocode}
% By opening a |annotationimage| environment, actually a |tikzpicture| is created.
%    \begin{macrocode}
  \begin{tikzpicture}
%    \end{macrocode}
% Next, we include the image. The options (parameter \#1) and the file name (parameter \#2) are passed to the |\includegraphics| command
% and the image is included in a Ti\emph{k}Z node called |image|.
%    \begin{macrocode}
  \node[anchor=south west, inner sep=0]
    (image) at (0,0) {\includegraphics[#1]{#2}};
%    \end{macrocode}
% A new |scope| is opened to set the coordinate system such that $(0,0)$ is bottom left and $(1,1)$ is top right.
%    \begin{macrocode}
  \begin{scope}[x={(image.south east)},y={(image.north west)}]
    \pgfonlayer{l1}
      \path[clip] (0,0) rectangle (1,1);
    \endpgfonlayer
%    \end{macrocode}
% Check whether the user wants to draw the help grid. If so, draw the help grid with the appropriate style.
% Otherwise, if the user does not want to draw the help grid, no further action is taken.
%    \begin{macrocode}
  \ifdefined\helpgridon
    \draw[very thin, draw=\finegridcolor, step=0.02]
      (0,0) grid (1,1);
    \draw[thin, draw=\maingridcolor, xstep=0.1, ystep=0.1]
      (0,0) grid (1,1);

    \foreach \x in {0,1,...,9} {
      \node [anchor=north] at (\x/10,0) {\tiny 0.\x};
    }
    \node [anchor=north] at (1,0) {\tiny 1};

    \foreach \y in {0,1,...,9} {
      \node [anchor=east] at (0,\y/10) {\tiny 0.\y};
    }
    \node [anchor=east] at (0,1) {\tiny 1};
  \else
  \fi
}
%    \end{macrocode}
% If the |annotationimage| environment is closed, the |scope| and the
% |tikzpicture| opened need to be closed.
%    \begin{macrocode}
{
 \end{scope}
 \end{tikzpicture}}
%    \end{macrocode}

% \subsection{Marking arrows}
% This is the macro for drawing the arrows to highlight certain points. It
% constructs an arrow from the given coordinate $(x_0, y_0)$ to the coordinate
% \begin{equation}
% x_1 = x_0 + l \cos \alpha \quad\text{,}\quad y_1 = y_0 + l \sin \alpha
% \end{equation}
% where $l$ is the length of one arrow and $\alpha$ is the angle. Note that the
% |double arrow| style also shortens the arrow by the |\arrowdistance| such that
% the arrow tip does not cover the point of interest.
%    \begin{macrocode}
\def\marking#1#2#3{% x y angle
  \draw[marking arrow]
    ([xshift={\markingarrowlength*cos(#3)},
      yshift={\markingarrowlength*sin(#3)}] #1, #2) -- (#1, #2);
}
%    \end{macrocode}

% \subsection{Label code}
% The macros described here are used for the arrows with labels. Arrows left of
% the image are constructed with |\labelleft|. This is implemented as follows
%    \begin{macrocode}
\newcommand{\labelleft}[3]{%
  \draw[annotation arrow] (-0.1,#3)
    node[anchor=east] {\annotationfont #2} -- (#1);
}
%    \end{macrocode}
% which draws an arrow from the coordinate $(-0.1, x_0)$ to the coordinate
% $(x_1, y_1)$. The first parameter of the macro corresponds to $(x_1, y_1)$
% whereas the third parameter corresponds to $x_0$. The label text is derived
% from the second parameter.
%    \begin{macrocode}

\newcommand{\labelabove}[3]{%
\draw[annotation arrow] (#3,1.1) node[anchor=south] {\annotationfont #2\strut{}} -- (#1);
}

\newcommand{\labelbelow}[3]{%
\draw[annotation arrow] (#3,-0.1) node[anchor=north] {\annotationfont #2\strut{}} -- (#1);
}

\newcommand{\labelright}[3]{%
\draw[annotation arrow] (1.1,#3) node[anchor=west] {\annotationfont #2} -- (#1);
}

\newcommand{\imagelabel}[1]{%
\node[image label] at (image.south east) {#1};
}

\newcommand{\markingcircle}[2]{%
\node[marking circle = #1] at (#2) {};
}


\pgfdeclarelayer{l1}
\pgfdeclarelayer{l2}
\pgfsetlayers{main,l1,l2}


\pgfkeys{%
  /tikz/on layer/.code={
    \pgfonlayer{#1}\begingroup
    \aftergroup\endpgfonlayer
    \aftergroup\endgroup
  },
  /tikz/node on layer/.code={
    \pgfonlayer{#1}\begingroup
    \expandafter\def\expandafter\tikz@node@finish\expandafter{\expandafter\endgroup\expandafter\endpgfonlayer\tikz@node@finish}%
  },
}


% tikz styles for annotations.
\tikzset{
  > = latex,
  % these are the arrows with the black dot at the end.
  annotation arrow/.style =
  {
    preaction =
    {
      on layer = l1,
      draw,
      -{Circle[fill=\bordercolor, length=\tipsize,  width=\tipsize]},
      line width = \arrowthickness,
      \bordercolor,
      shorten >= \arrowdistance,
    },
    on layer = l2,
    draw,
    -{Circle[fill=\arrowcolor, length=\tipsize-2*\arrowthickness/3, width=\tipsize-2*\arrowthickness/3]},
    \arrowcolor,
    line width = \arrowthickness/3,
    shorten >= \arrowthickness/3 + \arrowdistance,
  },
  annotation arrow below/.style args = {at #1 to #2 text #3}{
    annotation arrow,
    insert path = {(#1,-0.1) node[below] {#3} -- #2},
  },
  % arrows with a small circle at the end.
  circular arrow/.style args = {#1}{
    {Circle[open,width=#1,length=#1]}-,
    white,
    shorten <=-#1/2,
    line width = 0.6mm,
    inner sep = 0.3ex,
    postaction={
      draw,
      {Circle[open,width=#1-0.4mm,length=#1-0.4mm]}-,
      black,
      line width = 0.2mm,
      shorten <=-(#1-0.4mm)/2,
      % shorten >=4.5*(#1)/3
    },
    text = black
  },
  marking arrow/.style =
  {
    -latex,
    line width=\arrowthickness,
    white,
    shorten >= \arrowdistance,
    postaction={
      draw,
      -latex,
      black,
      line width=\arrowthickness/3,
      shorten <=\arrowthickness/4,
      shorten >=4.5*\arrowthickness/3+\arrowdistance
    }
  },
  double arrow/.style args={#1 colored by #2 and #3}{
    -latex,
    line width=#1,
    #2,
    shorten >= \arrowdistance,
    postaction={
      draw,
      -latex,
      #3,
      line width=(#1)/3,
      shorten <=(#1)/4,
      shorten >=4.5*(#1)/3+\arrowdistance
    }
  },
  marking circle/.style args = {#1}{
    circle,
    minimum size = #1,
    inner sep = 0pt,
    line width = 0.6mm,
    draw=white,
    inner sep = 0.3ex,
    postaction =
    {
      draw,
      black,
      line width = 0.2mm,
    },
    text = black
  },
  image label/.style =
  {
    rectangle,
    minimum width = 5mm,
    minimum height = 5mm,
    fill = black,
    text = white,
    font = \imagelabelfont,
    anchor = south east,
    xshift = -0.2cm,
    yshift = 0.2cm
  }
}
%    \end{macrocode}
%
% \Finale
\endinput
